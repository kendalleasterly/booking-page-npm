[{"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/index.js":"1","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/App.js":"2","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/reportWebVitals.js":"3","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Components/GoogleSignIn.js":"4","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Main.js":"5","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Products.js":"6","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Book.js":"7","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Components/Header.js":"8","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/NotFound.js":"9","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Home.js":"10","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Payment.js":"11","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Calendar.js":"12","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/ClassesAvailable.js":"13","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Components/Icon.js":"14","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Components/CheckoutForm.js":"15","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Components/BackButton.js":"16","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Hooks/FirebaseAdd.js":"17","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Hooks/PaymentModes.js":"18"},{"size":502,"mtime":1609718941000,"results":"19","hashOfConfig":"20"},{"size":2288,"mtime":1611716004822,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1609709034000,"results":"22","hashOfConfig":"20"},{"size":969,"mtime":1611715195655,"results":"23","hashOfConfig":"20"},{"size":2933,"mtime":1611707461337,"results":"24","hashOfConfig":"20"},{"size":3126,"mtime":1611704670624,"results":"25","hashOfConfig":"20"},{"size":1649,"mtime":1611703749962,"results":"26","hashOfConfig":"20"},{"size":9683,"mtime":1611723122108,"results":"27","hashOfConfig":"20"},{"size":373,"mtime":1611705517469,"results":"28","hashOfConfig":"20"},{"size":2030,"mtime":1611597425000,"results":"29","hashOfConfig":"20"},{"size":1369,"mtime":1611703227330,"results":"30","hashOfConfig":"20"},{"size":7188,"mtime":1611708639396,"results":"31","hashOfConfig":"20"},{"size":2452,"mtime":1611510096000,"results":"32","hashOfConfig":"20"},{"size":474,"mtime":1611361443000,"results":"33","hashOfConfig":"20"},{"size":3618,"mtime":1611723019739,"results":"34","hashOfConfig":"20"},{"size":259,"mtime":1610732325000,"results":"35","hashOfConfig":"20"},{"size":2444,"mtime":1611716131786,"results":"36","hashOfConfig":"20"},{"size":1001,"mtime":1611705599679,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"bfizs7",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/index.js",[],["82","83"],"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/App.js",["84"],"import GoogleSignIn from \"./Components/GoogleSignIn\"\nimport Main from \"./Views/Main\"\nimport firebase from \"firebase/app\"\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport \"tailwindcss/tailwind.css\"\nimport React, { useEffect } from \"react\"\nimport { BrowserRouter as Router, useHistory } from \"react-router-dom\"\n\nimport { useAuthState } from \"react-firebase-hooks/auth\"\nimport { Helmet, HelmetProvider } from \"react-helmet-async\"\n\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyCKoM5avYL1KHa5Z19W-OqIGZ6N1mN7_IA\",\n    authDomain: \"east-kickboxing-booking.firebaseapp.com\",\n    projectId: \"east-kickboxing-booking\",\n    storageBucket: \"east-kickboxing-booking.appspot.com\",\n    messagingSenderId: \"378920786387\",\n    appId: \"1:378920786387:web:ff23f67d0096fa4de97726\",\n    measurementId: \"G-RQWW28MLYR\"\n  })\n}\n\n\n\nconst auth = firebase.auth()\nconst firestore = firebase.firestore()\n\nfunction App() {\n\n  const [user] = useAuthState(auth)\n  const history = useHistory()\n\n  useEffect(() => {\n\n    auth.getRedirectResult()\n      .then((result) => {\n\n        var user = result.user;\n\n        if (user) {\n          const uid = user.uid\n          const userRef = firestore.collection(\"users\").doc(uid)\n\n          userRef.get()\n            .then((snapshot) => {\n              if (!snapshot.exists) {\n\n                userRef.set({\n                  name: user.displayName,\n                  email: user.email,\n                  freeClasses: 0,\n                  isMember: false\n                })\n              }\n            })\n        }\n      }).catch((err) => {\n\n        history.push(\"/error\")\n        console.log(\"error in get redirect was\", err)\n        \n      })\n  }, [user])\n\n  //you have two different routes that you can control. what needs to happen is that when you sign in, app.js needs to get that \n  //and upload the user's new information.\n  return (\n    <HelmetProvider>\n\n      <Router className=\"z-50\">\n        <link rel=\"stylesheet\" href=\"https://css.gg/css\" />\n\n        <Helmet>\n          <style>{'body { background-color: #FAFAFA;; }'}</style>\n        </Helmet>\n\n        {user ? <Main firestore={firestore} auth={auth} /> : <GoogleSignIn auth={auth} firebase={firebase} />}\n\n      </Router>\n    </HelmetProvider>\n\n\n  );\n}\n\n\nexport default App;\n","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/reportWebVitals.js",[],"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Components/GoogleSignIn.js",["85"],"import React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nfunction GoogleSignIn(props) {\n\n    const signInWithGoogle = () => {\n        \n        const provider = new props.firebase.auth.GoogleAuthProvider()\n\n        props.auth.signInWithRedirect(provider)\n        \n    }\n    const history = useHistory()\n\n    useEffect(() => {\n\n        // history.push(\"/signin\")\n\n    }, [history])\n\n    return (\n        <div className = \"w-full flex flex-col justify-center items-center h-9 h-screen space-y-10\">\n\n            <button onClick = {signInWithGoogle} className = \"max-w-xs font-bold rounded-3xl bg-blue-100 text-center text-white w-full py-1.5 inline-block align-middle flex justify-center space-x-4 px-4\"> \n            <img src=\"http://icons.kendalleasterly.com/blue-500/google.svg\" alt=\"\"/>\n            <p className = \"text-blue-500\">Sign in with Google</p>\n            </button>\n\n        </div>\n    )\n}\n\nexport default GoogleSignIn","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Main.js",["86"],"import React from 'react'\nimport Book from \"./Book\"\nimport Products from \"./Products\"\nimport { Route, Switch, useParams } from \"react-router-dom\"\nimport { useDocumentData } from \"react-firebase-hooks/firestore\"\nimport Header from \"../Components/Header\"\nimport NotFound from \"./NotFound\"\nimport Home from \"./Home\"\n\nfunction Main(props) {\n\n    const accountRef = props.firestore.collection(\"users\").doc(props.auth.currentUser.uid)\n    const [account] = useDocumentData(accountRef)\n\n    const header = <Header\n        firestore={props.firestore}\n        account={account}\n        auth={props.auth} />\n\n\n    // const getErrorInfo = function () {\n\n    //     let details = \"\"\n    //     console.log(\"params are\", id)\n    //     if (id) {\n\n    //         switch (id) {\n\n    //             case \"payment\":\n    //                 details = \"An error with our payment servers caused a disruption.\"\n    //                 break\n    //             case \"book\":\n    //                 details = \"An error with our database servers caused a disruption.\"\n    //                 break\n    //             default:\n    //                 break\n    //         }\n    //     }\n\n    //     return details\n\n    // }\n\n    return (\n\n        <div>\n            {/* <div className=\"p-4\"> */}\n\n            {/* </div> */}\n\n\n            <Switch>\n                <Route exact path=\"/\">\n\n                    {/* {header} */}\n                    <Home header={header} />\n\n\n                </Route>\n\n                <Route path=\"/book\">\n                    <div className=\"p-4\">\n                        {header}\n                        <Book\n                            firestore={props.firestore}\n                            auth={props.auth}\n                            account={account} />\n\n                    </div>\n                </Route>\n\n                <Route path=\"/products\">\n                    <div className=\"p-4\">\n                        {header}\n                        <Products\n                            firestore={props.firestore}\n                            auth={props.auth}\n                            account={account} />\n                    </div>\n                </Route>\n\n                <Route path = \"/error\">\n                    <div className=\"p-4\">\n                        {header}\n\n                        <p className=\"text-center font-semibold text-xl italic\">We're sorry, but there was an error. Please try again.\n                            <br /> If the problem persists, contact support@eastkickboxingclub.com for help.</p>\n                        {/* <p className=\"text-l text-center mt-4\">{getErrorInfo()}</p> */}\n\n\n                    </div>\n                </Route>\n\n                <Route>\n                    <div className=\"p-4\">\n                        {header}\n                        <NotFound />\n\n                    </div>\n                </Route>\n            </Switch>\n        </div>\n    )\n}\n\nexport default Main\n","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Products.js",[],"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Book.js",[],"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Components/Header.js",[],"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/NotFound.js",[],"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Home.js",[],"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Payment.js",["87"],"import { loadStripe } from '@stripe/stripe-js'\nimport React, { useEffect } from 'react'\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport CheckoutForm from \"../Components/CheckoutForm\"\n// Make sure to call loadStripe outside of a component’s render to avoid\n// recreating the Stripe object on every render.\n// loadStripe is initialized with your real test publishable API key.\nconst promise = loadStripe(\"pk_test_51I68DAF7CJHF9XyiIrrANxfLPdD7jJcTuFpdVnOzVeS5ePbc0NRaXQPCT40A0sYiCYzUula7PlyyXhcAGb24Pp2400HHOo54rE\");\n\nexport default function Payment(props) {\n\n  const history = useHistory()\n  const selectedTime = props.selectedTime\n  const { id } = useParams()\n  useEffect(() => {\nconsole.log(selectedTime)\n    if (selectedTime) {\n      //booking mode\n      if (selectedTime === \"\") {\n        history.push(\"/book\")\n      }\n    } else {\n\n      if (\n        id !== \"threepack\" &&\n        id !== \"fourpack\" &&\n        id !== \"tenpack\" &&\n        id !== \"membership\"\n      ) {\n        history.push(\"/\")\n      }\n    }\n  }, [history])\n\n  return (\n    <div className=\"App\">\n      <Elements stripe={promise}>\n        <CheckoutForm\n          firestore={props.firestore}\n          auth={props.auth}\n          account={props.account}\n          selectedTime={selectedTime} />\n      </Elements>\n    </div>\n  );\n}\n","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/Calendar.js",["88","89","90","91"],"import \"firebase/auth\"\nimport \"firebase/firestore\"\n\nimport React, { useState, useEffect } from 'react'\n\nimport { useCollectionOnce } from \"react-firebase-hooks/firestore\"\nimport { Link } from \"react-router-dom\"\n\nconst getCurrentMonth = function () {\n    let month = new Date().getMonth()\n\n    if (month < 10) {\n        return \"0\" + month\n    } else {\n        return `${month}`\n    }\n}\n\nfunction Calendar(props) {\n\n    const firestore = props.firestore\n    const setSelectedTime = props.setSelectedTime\n\n    const classesRef = firestore.collection(\"classes\")\n    const [classes] = useCollectionOnce(classesRef)\n    //if you get an error with this after making it dynamic, it's because you need to add the 0 in 01\n    const currentMonth = getCurrentMonth()\n    const [availableDays, setAvailableDays] = useState({})\n    const [selectedDay, setSelectedDay] = useState(new Date().getDate())\n    const daysArray = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\n\n    useEffect(() => {\n\n        if (classes) {\n\n            // read from firebase\n            // make array of days you get\n            // then check if the length of attendees is 8, don't include the number\n\n            let availableDaysDict = {}\n\n            classes.docs.forEach(element => {\n                const id = element.id\n                const timeArray = id.split(\"-\")\n                const month = timeArray[1]\n                const day = parseInt(timeArray[2], 10)\n                const time = timeArray[3] + \"-\" + timeArray[4]\n                const attendeeCount = element.data().attendees.length\n                const currentDay = new Date().getDate()\n\n                if (month === currentMonth && attendeeCount <= 8 && day >= currentDay) {\nconsole.log(id, \"ran\")\n                    availableDaysDict[day] = id\n\n                }\n            });\n\n            setAvailableDays(availableDaysDict)\n\n        }\n\n    }, [classes])\n\n    useEffect(() => {\n        console.log(\"available days are\", availableDays)\n        console.log(\"selected day is\", availableDays[selectedDay])\n\n    }, [availableDays])\n\n    const getDays = function (year, month) {\n        let numOfDays = new Date(year, month, 0).getDate();\n        let dayArray = []\n\n        let i\n        for (i = 0; i < numOfDays; i++) {\n            dayArray.push(i + 1)\n        }\n        return dayArray\n    };\n\n    const decideOffset = function () {\n        const now = new Date()\n        let d = new Date(now.getFullYear(), now.getMonth(), 1)\n        let offset = new Date().getDay() - 1\n\n\n        let offsetArray = []\n        let i\n        for (i = 0; i < offset; i++) {\n            offsetArray.push(i)\n        }\n\n        return offsetArray\n    }\n\n\n    return (\n        <div className=\"font-bold text-xl space-y-8 \">\n            <div className=\"card grid gap-7 grid-cols-7 text-center text-blue-500 \">\n                {daysArray.map((element, key) => <p key={key} className=\"text-gray-700 text-center\">{element}</p>)}\n\n\n                {decideOffset().map((element, key) => <p key={key}></p>)}\n\n                {getDays(2021, new Date().getMonth()).map((element, key) => <Day day={element} key={key} selectedTime={props.selectedTime} />)}\n\n            </div>\n\n            <InfoCard />\n\n        </div>\n    )\n\n    function Day(props) {\n\n        let disabled = true\n\n        const decideStyling = function () {\n\n            let availableDaysKeys = Object.keys(availableDays)\n            let string = props.day + \"\"\n\n            if (selectedDay === props.day) {\n\n                if (availableDaysKeys.includes(string)) {\n                    disabled = false\n                    return \"text-white font-bold w-8 h-8 bg-blue-500 rounded-full text-center\"\n                } else {\n                    disabled = true\n                    return \"text-white font-bold w-8 h-8 bg-gray-300 rounded-full text-center\"\n                    //TODO: add a feature that makes sure if a day has already passed, it is disabled.\n                }\n\n            } else if (availableDaysKeys.includes(string)) {\n                disabled = false\n                return \"font-bold text-blue-500 w-8 h-8 text-center\"\n            } else {\n                return \"font-bold text-gray-300 w-8 h-8 text-center\"\n\n            }\n\n        }\n\n        const changeSelectedDay = function () {\n\n\n            setSelectedDay(props.day)\n            console.log(\"selected day from change is\", availableDays[props.day])\n            setSelectedTime(availableDays[props.day])\n\n        }\n\n\n        if (disabled) {\n            return (\n                <button onClick={changeSelectedDay} className={decideStyling()} disabled={disabled}>{props.day}</button>\n            )\n        } else {\n            return (\n                <button onClick={changeSelectedDay} className={decideStyling()} >{props.day}</button>\n            )\n        }\n\n    }\n\n    function InfoCard() {\n\n        let element = <p className=\"w-full text-center font-normal text-gray-400\">Sorry, there are no classes for this day. Please select an available day.</p>\n        let account = props.account\n\n        const formatTime = function (time) {\n            //note: time is in the format of the firebase doucment ID\n\n            const timeArray = time.split(\"-\")\n            const plainHour = timeArray[3]\n            const minute = timeArray[4]\n\n            const hour = Number(plainHour).toString()\n\n            return hour + \":\" + minute\n        }\n\n        const decideNextStep = function () {\n            console.log(account)\n            if (account.freeClasses > 0 || account.isMember) {\n\n                return \"/book/usefreeclasses\"\n            } else {\n                return \"/book/payment\"\n            }\n        }\n\n\n        let availableDaysKeys = Object.keys(availableDays)\n        let string = selectedDay + \"\"\n\n        if (availableDaysKeys.includes(string)) {\n\n            let time = availableDays[string]\n\n            element =\n                <div className=\"card text-left text-gray-900 space-y-4\">\n                    <p className=\"float-right text-lg font-normal text-gray-400\">January {selectedDay}</p>\n\n                    <div>\n                        <p className=\"text-lg text-gray-400\">Time</p>\n                        <p>{formatTime(time)} AM</p>\n                    </div>\n\n                    <div>\n                        <p className=\"text-lg text-gray-400\">Price</p>\n                        <p className=\"mb-5\">$15.00</p>\n                    </div>\n\n                    <div>\n                        <p className=\"text-lg text-gray-400\">Teacher</p>\n                        <p className=\"mb-5\">Jason Easterly</p>\n                    </div>\n\n                    <Link to={decideNextStep()}>\n                        <p className=\"font-bold rounded-3xl bg-blue-500 text-center text-white w-full py-1.5\">Next</p>\n                    </Link>\n\n                </div>\n\n        }\n\n        //first, get the current selected day. If you can find it in the availableDays dictionary, \n        //then format the time value using a function and put the return of it and add it to it's dom element\n        //put the day in it's dom element using the variable\n        return (\n            element\n        )\n    }\n\n\n}\n\nexport default Calendar","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Views/ClassesAvailable.js",["92"],"import {useCreateEvent } from \"../Hooks/FirebaseAdd\"\nimport {useHistory, Link} from \"react-router-dom\"\nimport BackButton from \"../Components/BackButton\"\nimport {useEffect} from \"react\"\n\nfunction ClassesAvailable(props) {\n    \n    const account = props.account\n    const history = useHistory()\n    const selectedTime = props.selectedTime\n    const createEvent = useCreateEvent(props.firestore, props.auth, account, selectedTime)\n\n    const decideText = function () {\n        if (account) {\n            if (account.freeClasses === 1) {\n                return [\"You have 1 free class left.\", \"Would you like to use it?\"]\n            } else if (account.isMember) {\n                return [`You have an unlimted amount of free classes.`, \"Would you like to use one?\"]\n            } else {\n                return [`You have ${account.freeClasses} free classes left.`, \"Would you like to use one?\"]\n            }\n        } else {\n            console.log(\"there was no account\")\n            return [\"Loading...\", \"\"]\n        }\n        \n\n    }\n\n/*TODO: to avoid error, you can simply put the contents of the component in a variable, and show the variable in the \nreturn statement. You create a default variable value which is a regular p, and then you have an if statement right here\nthat checks whther or not we have checked to see if we have available classes. if we have not, we will history.push the \nog page */\n\nuseEffect(() => {\n   \n    if(selectedTime === \"\") {\n        history.push(\"/\")\n    }\n\n}, [selectedTime])\n\n    return (\n\n        <div className=\"card text-left text-gray-900 space-y-4\">\n            \n            <BackButton to=\"/book\" />\n            \n            <div className=\"float-center text-center font-semibold space-y-1\">\n                <p className=\"text-l\">{decideText()[0]}</p>\n                <p className=\"text-sm\">{decideText()[1]}</p>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-x-2.5\">\n                <Link to = \"/book/payment\" className=\"border-black border-2 rounded-3xl p-0.5 text-center\">\n                <p >No</p>\n                </Link>\n                \n                {/* this needs to do all neccessary firebase things. It can be reused in the payment button */}\n\n                <button onClick = {() => createEvent(true)} className=\"bg-blue-500 text-white rounded-3xl py-0.5 text-center\">Yes</button>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default ClassesAvailable","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Components/Icon.js",[],"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Components/CheckoutForm.js",["93"],"import React, { useState, useEffect } from \"react\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport {useCreateEvent } from \"../Hooks/FirebaseAdd\"\nimport {usePaymentFunctions } from \"../Hooks/PaymentModes\"\nimport BackButton from \"./BackButton\";\nimport {useHistory} from \"react-router-dom\"\n\nexport default function CheckoutForm(props) {\n\n  const account = props.account\n  const history = useHistory()\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const editDatabase = useCreateEvent(props.firestore, props.auth, account, props.selectedTime)\n  const [decidePreviousStep, getProductId] = usePaymentFunctions(props.selectedTime, account)\n\n  \n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window\n      .fetch(\"https://east-kickboxing-booking.herokuapp.com/create-payment-intent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ items: [{ id: getProductId() }] })\n      })\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        setClientSecret(data.clientSecret);\n      })\n  }, []);\n\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n\n      history.pushState(\"/error\")\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n\n      editDatabase(false)\n\n    }\n  };\n  \n//TODO: add a server function that resets the membership people's counts each month\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <div className=\"card space-y-5\">\n\n        <BackButton to = {decidePreviousStep()}/>\n\n\n        <p className=\"text-xl font-bold text-center\">Enter your payment details</p>\n\n        <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} className=\"py-2.5\" />\n\n        <button id=\"submit\"\n          className=\"font-semibold rounded-3xl bg-blue-500 text-center text-white w-full py-1.5\"\n          disabled={processing || disabled || succeeded} >\n\n          <span id=\"button-text\">\n\n            {processing ? (\n              <p className=\"spinner\" id=\"spinner\">Loading...</p>\n            ) : (\"Done\")}\n          </span>\n        </button>\n\n      </div>\n\n      {error && (\n        <div className=\"card-error text-red-400 mx-auto max-w-sm lg:max-w-md text-center mt-7\" role=\"alert\">\n          {error}\n        </div>\n      )}\n    </form>\n  );\n}","/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Components/BackButton.js",[],"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Hooks/FirebaseAdd.js",[],"/Users/kendalleasterly/Documents/Web Development/Archive/EKC Scheduling ReactApp/booking-page-npm/src/Hooks/PaymentModes.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":66,"column":6,"nodeType":"100","endLine":66,"endColumn":12,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":28,"nodeType":"104","messageId":"105","endLine":1,"endColumn":36},{"ruleId":"102","severity":1,"message":"106","line":4,"column":25,"nodeType":"104","messageId":"105","endLine":4,"endColumn":34},{"ruleId":"98","severity":1,"message":"107","line":34,"column":6,"nodeType":"100","endLine":34,"endColumn":15,"suggestions":"108"},{"ruleId":"102","severity":1,"message":"109","line":47,"column":23,"nodeType":"104","messageId":"105","endLine":47,"endColumn":27},{"ruleId":"98","severity":1,"message":"110","line":62,"column":8,"nodeType":"100","endLine":62,"endColumn":17,"suggestions":"111"},{"ruleId":"98","severity":1,"message":"112","line":68,"column":8,"nodeType":"100","endLine":68,"endColumn":23,"suggestions":"113"},{"ruleId":"102","severity":1,"message":"114","line":83,"column":13,"nodeType":"104","messageId":"105","endLine":83,"endColumn":14},{"ruleId":"98","severity":1,"message":"99","line":41,"column":4,"nodeType":"100","endLine":41,"endColumn":18,"suggestions":"115"},{"ruleId":"98","severity":1,"message":"116","line":48,"column":6,"nodeType":"100","endLine":48,"endColumn":8,"suggestions":"117"},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["120"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'selectedTime'. Either include them or remove the dependency array.",["121"],"'time' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentMonth'. Either include it or remove the dependency array.",["122"],"React Hook useEffect has a missing dependency: 'selectedDay'. Either include it or remove the dependency array.",["123"],"'d' is assigned a value but never used.",["124"],"React Hook useEffect has a missing dependency: 'getProductId'. Either include it or remove the dependency array.",["125"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [history, user]",{"range":"138","text":"139"},"Update the dependencies array to be: [history, id, selectedTime]",{"range":"140","text":"141"},"Update the dependencies array to be: [classes, currentMonth]",{"range":"142","text":"143"},"Update the dependencies array to be: [availableDays, selectedDay]",{"range":"144","text":"145"},"Update the dependencies array to be: [history, selectedTime]",{"range":"146","text":"147"},"Update the dependencies array to be: [getProductId]",{"range":"148","text":"149"},[1698,1704],"[history, user]",[1085,1094],"[history, id, selectedTime]",[1877,1886],"[classes, currentMonth]",[2043,2058],"[availableDays, selectedDay]",[1496,1510],"[history, selectedTime]",[1492,1494],"[getProductId]"]